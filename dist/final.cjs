(()=>{"use strict";const a=require("express"),e=require("joi"),t=e.object({email:e.string().max(100).required(),username:e.string().max(100).required(),password:e.string().max(100).required(),usia:e.string().max(3).required(),no_telepon:e.string().max(13).required()}),n=e.object({email:e.string().max(100).required(),password:e.string().max(100).required()}),r=e.string().max(100).required();class s extends Error{constructor(a,e){super(e),this.status=a}}const i=(a,e)=>{const t=a.validate(e);if(t.error)throw new s(400,t.error.message);return t.value},o=require("bcryptjs"),d=new(require("@prisma/client").PrismaClient),c=require("uuid"),u=(e.object({name:e.string().max(100).required(),image:e.string().max(255).required()}),e.string().max(100).required()),m=new a.Router;m.post("/api/register",(async(a,e,n)=>{try{const n=await(async a=>{const e=i(t,a);if(1===await d.member.count({where:{email:e.email}}))throw new s(400,"Email already exist");return e.password=await o.hash(e.password,10),await d.member.create({data:e,select:{email:!0,username:!0}})})(a.body);e.status(200).json({data:n})}catch(a){n(a)}})),m.post("/api/login",(async(a,e,t)=>{try{const t=await(async a=>{const e=i(n,a),t=await d.member.findUnique({where:{email:e.email},select:{email:!0,password:!0}});if(!t)throw new s(401,"Username or Password is wrong");if(!o.compare(e.password,t.password))throw new s(401,"Username or Password is wrong");const r=(0,c.v4)().toString();return await d.member.update({data:{token:r},where:{email:t.email},select:{token:!0}})})(a.body);e.status(200).json({data:t})}catch(a){t(a)}}));const w=e.object({nama:e.string().max(100).required(),tanggal:e.date().required()}),h=e.number().positive().required(),g=e.number().positive().required(),y=a.Router();y.use((async(a,e,t)=>{const n=a.get("Authorization");if(n){const r=await d.member.findFirst({where:{token:n.split(" ")[1]}});r?(a.member=r,t()):e.status(401).json({errors:"Unauthorized"}).end()}else e.status(401).json({errors:"Unauthorized"}).end()})),y.post("/api/logout",(async(a,e,t)=>{try{await(async a=>{if(i(r,a),!await d.member.findUnique({where:{email:a}}))throw new s(404,"Member is Not Found");return await d.member.update({where:{email:a},data:{token:null}})})(a.member.email),e.status(200).json({message:"Logout Success"})}catch(a){t(a)}})),y.get("/api/bahan",(async(a,e,t)=>{try{const a=await(async()=>await d.bahan.findMany())();e.status(200).json({data:a})}catch(a){t(a)}})),y.get("/api/bahan/:namaBahan",(async(a,e,t)=>{try{const t=a.params.namaBahan,n=await(async a=>{i(u,a);const e=await d.bahan.findMany({where:{name:{contains:a}},select:{name:!0,image:!0}});if(!e)throw new s(404,"Bahan is Not Found");return e})(t);e.status(200).json({data:n})}catch(a){t(a)}})),y.get("/api/keranjang",(async(a,e,t)=>{try{const t=await(async a=>{const e=a.member.id;return i(h,e),await d.keranjang.findMany({where:{member_id:e},include:{}})})(a);e.status(200).json({data:t})}catch(a){t(a)}})),y.post("/api/keranjang/create",(async(a,e,t)=>{try{const t=await(async a=>{const e=i(w,a.body);return await d.keranjang.create({data:{...e,member_id:a.member.id}})})(a);e.status(200).json({data:t})}catch(a){t(a)}})),y.get("/api/keranjang/:keranjangId",(async(a,e,t)=>{try{const t=await(async a=>{const e=a.params.keranjangId;return i(g,e),await d.keranjang.findFirst({where:{id:parseInt(e),member_id:a.member.id},include:{bahan}})})(a);e.status(200).json({data:t})}catch(a){t(a)}})),y.post("/api/keranjang/addBahan",(async(a,e,t)=>{try{const t=await(async a=>{if(await d.bahanOnKeranjang.findFirst({where:{keranjang_id:a.keranjang_id,bahan_id:a.bahan_id}}))throw new s(409,"Resource Already Exist");return await d.bahanOnKeranjang.create({data:a})})(a.body);e.status(200).json({data:t})}catch(a){t(a)}})),y.put("/api/keranjang/update",(async(a,e,t)=>{try{const t=await(async a=>{await a.body.map((async a=>{await d.bahanOnKeranjang.update({where:{keranjang_id_bahan_id:{keranjang_id:a.keranjang_id,bahan_id:a.bahan_id}},data:{jumlah:a.jumlah,harga:a.harga}})}))})(a);e.status(200).json({data:t})}catch(a){t(a)}}));const b=a();b.use(a.json()),b.use(a.urlencoded({extended:!0})),b.use(m),b.use(y),b.use((async(a,e,t,n)=>{a?a instanceof s?t.status(a.status).json({errors:a.message}).end():t.status(500).json({errors:a.message}):n()})),b.listen(3001,(()=>{console.log("BACKEND SERVER IS RUNNING ON PORT 3001")}))})();